package org.hindigarv.core

import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

import org.junit.jupiter.api.Assertions.*

internal class StringUtilsKtTest {

    @Test
    fun shouldSplitTextToWords() {
        val text = "рдмрд┐рд╣рд╛рд░ рдХреЙрдиреНрдЧреНрд░реЗрд╕ рдореЗрдВ рдЯреВрдЯ рдХреА рдЦрдмрд░реЛрдВ рдиреЗ рдЬреЛрд░ рдкрдХрдбрд╝ рд▓рд┐рдпрд╛ рд╣реИред 2017 рдореЗрдВ рдЬрдм рдиреАрддреАрд╢ рдХреБрдорд╛рд░ рдиреЗ рдорд╣рд╛рдЧрдардмрдВрдзрди рдЫреЛрдбрд╝рд╛ рдерд╛, рддрдм рднреА рдкрд╛рд░реНрдЯреА рдореЗрдВ рдЯреВрдЯ рд╣реБрдИ рдереАред"
        val words = listOf("рдмрд┐рд╣рд╛рд░", "рдХреЙрдиреНрдЧреНрд░реЗрд╕", "рдореЗрдВ", "рдЯреВрдЯ", "рдХреА", "рдЦрдмрд░реЛрдВ", "рдиреЗ", "рдЬреЛрд░", "рдкрдХрдбрд╝", "рд▓рд┐рдпрд╛", "рд╣реИ", "2017", "рдореЗрдВ",
            "рдЬрдм", "рдиреАрддреАрд╢", "рдХреБрдорд╛рд░", "рдиреЗ", "рдорд╣рд╛рдЧрдардмрдВрдзрди", "рдЫреЛрдбрд╝рд╛", "рдерд╛", "рддрдм", "рднреА", "рдкрд╛рд░реНрдЯреА", "рдореЗрдВ", "рдЯреВрдЯ", "рд╣реБрдИ", "рдереА")
        assertEquals(words, text.tokenize())
    }

    @Test
    fun shouldIgnoreMoreSpaces() {
        val text = "рд╕рдм рд╕реЛ  рдЧрдП  рдХреНрдпрд╛"
        val words = listOf("рд╕рдм", "рд╕реЛ", "рдЧрдП", "рдХреНрдпрд╛")
        assertEquals(words, text.tokenize())
    }

    @Test
    fun shouldIgnoreTabAndNewLines() {
        val text = "рд╕рдм рд╕реЛ \t рдЧрдП\nрдХреНрдпрд╛"
        val words = listOf("рд╕рдм", "рд╕реЛ", "рдЧрдП", "рдХреНрдпрд╛")
        assertEquals(words, text.tokenize())
    }

    @Test
    fun shouldIgnoreCommaAndFullStops() {
        val text = "рд╕рдм, рд╕реЛ рдЧрдП рдХреНрдпрд╛."
        val words = listOf("рд╕рдм", "рд╕реЛ", "рдЧрдП", "рдХреНрдпрд╛")
        assertEquals(words, text.tokenize())
    }
    @Test
    fun shouldIgnoreHindiFullStops() {
        val text = "рд╕рдм, рд╕реЛ рдЧрдП рдХреНрдпрд╛ред"
        val words = listOf("рд╕рдм", "рд╕реЛ", "рдЧрдП", "рдХреНрдпрд╛")
        assertEquals(words, text.tokenize())
    }

    @Test
    fun shouldIgnoreQuestionMarks() {
        val text = "рд╕рдм рд╕реЛ рдЧрдП рдХреНрдпрд╛?"
        val words = listOf("рд╕рдм", "рд╕реЛ", "рдЧрдП", "рдХреНрдпрд╛")
        assertEquals(words, text.tokenize())
    }

    @Test
    fun shouldIgnoreExclamationMark() {
        val text = "рд╕рдм рд╕реЛ рдЧрдП рдХреНрдпрд╛!"
        val words = listOf("рд╕рдм", "рд╕реЛ", "рдЧрдП", "рдХреНрдпрд╛")
        assertEquals(words, text.tokenize())
    }

    @Test
    fun shouldSplitWordsWithOnlyDot() {
        val text = "рд╕рдм.рд╕реЛ"
        val words = listOf("рд╕рдм", "рд╕реЛ")
        assertEquals(words, text.tokenize())
    }

    @Test
    fun shouldSplitWordsWithManyDots() {
        val text = "рд╕рдм....рд╕реЛ"
        val words = listOf("рд╕рдм", "рд╕реЛ")
        assertEquals(words, text.tokenize())
    }

    @Test
    fun shouldSplitWordsWithOnlyComma() {
        val text = "рд╕рдм,рд╕реЛ"
        val words = listOf("рд╕рдм", "рд╕реЛ")
        assertEquals(words, text.tokenize())
    }

    @Test
    fun shouldSplitWordsWithManyCommas() {
        assertThat("рд╕рдм,,,,,,,рд╕реЛ".tokenize()).isEqualTo(listOf("рд╕рдм", "рд╕реЛ"))
    }

    @Test
    fun shouldSplitWordsWithManyCommasAndDotsMixed() {
        assertThat("рд╕рдм,,.,,.,..,,.рд╕реЛ".tokenize()).isEqualTo(listOf("рд╕рдм", "рд╕реЛ"))
    }

    @Test
    fun shouldIgnorePercentageSign() {
        val text = "рдкрддрдВрдЬрд▓рд┐ рдХрд╛ рдкреНрд░реЙрдлрд┐рдЯ 100% рдЪреИрд░рд┐рдЯреА рдХреЗ рд▓рд┐рдпреЗред"
        val words = listOf("рдкрддрдВрдЬрд▓рд┐", "рдХрд╛", "рдкреНрд░реЙрдлрд┐рдЯ", "100", "рдЪреИрд░рд┐рдЯреА", "рдХреЗ", "рд▓рд┐рдпреЗ")
        assertEquals(words, text.tokenize())
    }

    @Test
    fun shouldIgnoreBraces() {
        val text = "рдкрддрдВрдЬрд▓рд┐ (рдХрд╛) рдкреНрд░реЙрдлрд┐рдЯ 100% [рдЪреИрд░рд┐рдЯреА] {рдХреЗ} рд▓рд┐рдпреЗред"
        val words = listOf("рдкрддрдВрдЬрд▓рд┐", "рдХрд╛", "рдкреНрд░реЙрдлрд┐рдЯ", "100", "рдЪреИрд░рд┐рдЯреА", "рдХреЗ", "рд▓рд┐рдпреЗ")
        assertEquals(words, text.tokenize())
    }

    @Test
    internal fun shouldHandleStarAsASeparator() {
        val words = "рдЕрдЧрд░ рдХреЛрдИ рдЖрдкрдХреА рдЙрдореНрдореАрдж рд╕реЗ рдЬреАрддрд╛ рд╣реИрдВ, рддреЛ рдЖрдк рднреА рдЙрд╕рдХреЗ рдпрдХреАрди рдкрд░ рдЦрд░рд╛ рдЙрддрд░рд┐рдпреЗ......... *рдХреНрдпреЛрдВрдХрд┐*рдЗрдВрд╕рд╛рди рдЙрд╕рд┐ рд╕реЗ рдЙрдореНрдореАрдж рд░рдЦрддрд╛ рд╣реИ, рдЬрд┐рд╕рдХреЛ рд╡реЛ рдЕрдкрдиреЗ рд╕рдмрд╕реЗ рдХрд░реАрдм рдорд╛рдирддрд╛ рд╣реИ!..... #рдЬрдп рд╢реНрд░реАрд░рд╛рдо \uD83D\uDEA9\uD83D\uDEA9".tokenize()
        assertThat(words).contains("рдЗрдВрд╕рд╛рди")
    }

    @Test
    internal fun shouldSplitWordByNBSP() {
        val words = "рдорд╛рдШ┬ардмрд┐рд╣реВ рдЗрд╕ рд╕рд╛рд▓ 2021,  15 рдЬрдирд╡рд░реА, рд╢реБрдХреНрд░рд╡рд╛рд░ рдХреЛ рдордирд╛рдпрд╛ рдЬрд╛рдПрдЧрд╛ ред рдЕрд╕рдо┬ардХреЗ┬ард▓реЛрдЧ рдЗрд╕ рддреНрдпреЛрд╣рд╛рд░┬ардХреЗ┬ард╕рд╛рде рд╣реА рдирдпреЗ рд╕рд╛рд▓┬ардХреА┬ард╢реБрд░реБрдЖрдд рдорд╛рдирддреЗ┬ард╣реИрдВ ред #рейрд╣".tokenize()
        assertThat(words).contains("рд╢реБрд░реБрдЖрдд")
    }

    @Test
    internal fun shouldSplitWordsByUnderscore() {
        val words = """рд╕рднреА рд▓реЛрдЧ рдмрдврд╝рдЪрдврд╝рдХрд░ рд╣рд┐рд╕реНрд╕рд╛ рд▓реАрдЬрд┐рдпреЗредред
 рдЕрдВрддрд░рд╛рд╖реНрдЯреНрд░реАрдп рдореБрд╣рд┐рдо  рдмрдирд╛рдиреЗ рдореЗрдВ рд╕рд╣рдпреЛрдЧ рдХреА рдЕрдкреЗрдХреНрд╖рд╛тЪФя╕П

#рджреЗрд╡рдирд┐рдВрджрд╛_рдХрд╛рдиреВрди_рдмрдирд╛рдУ
#рджреЗрд╡рдирд┐рдВрджрд╛_рдХрд╛рдиреВрди_рдмрдирд╛рдУ
#рджреЗрд╡рдирд┐рдВрджрд╛_рдХрд╛рдиреВрди_рдмрдирд╛рдУ

Copy &amp; RtтЬМя╕П""".tokenize()
        assertThat(words).contains("рдХрд╛рдиреВрди")
    }

    @Test
    internal fun shouldSplitWordByDash() {
        val words = """рдорд╢рд╣реВрд░ рд╣реЛрдиреЗ рдХрд╛ рд╢реМрдХ рд╣рдореЗрдВ рдирд╣реАрдВ рд╣реИ рд╕рд╛рд╣рдм рдмрд╕ рд╕реБрдмрд╣-рд╕реБрдмрд╣ рдХреЛрдИ рдЬрдп рдЬрдп рд╢реНрд░реА рд░рд╛рдо рдмреЛрд▓ рджреЗ рддреЛ рдЫрд╛рддреА рдЪреМрдбрд╝реА рд╣реЛ рдЬрд╛рддреА рд╣реИ" ...!

            ЁЯЩП " рдЬрдп рд╢реНрд░реА рд░рд╛рдо " ЁЯЩП""".tokenize()
        assertThat(words).contains("рд╕реБрдмрд╣")
    }

    @Test
    internal fun shouldSplitWordByEmoji() {
        val words = """рдорд┐рддреНрд░реЛрдВ рдХрд┐рддрдиреЗ рдЪрд╛рд╣рддреЗ рд╣реЛ рдХрд┐ рдореИрдВ рдЯреНрд╡рд┐рдЯрд░ рдкрд░ рдПрдХреНрдЯрд┐рд╡ рд░рд╣реВрдВ рдФрд░
рдХрд┐рддрдиреЗ рдЪрд╛рд╣рддреЗ рд╣реИ рдХрд┐ рдЫреЛрдбрд╝ рджреВрдВ ЁЯШЮ

рдЬрд╡рд╛рдмЁЯЩП""".tokenize()
        assertThat(words).contains("рдЬрд╡рд╛рдм")
    }
    @Test
    internal fun shouldHandleOneSidedQuotes() {
        val text = """рдЕрдЬреА рд╕реБрдирддреЗ рд╣реЛ, рдПрдХ рд░рд╛рдЬ рдХреА рдмрд╛рдд рдмрддрд╛рддреА рд╣реВрдВ..??

рдореЛрд╣рдмреНрдмрдд рдХреЗ рд▓рд┐рдП "рджрд┐рд▓ рдФрд░ рджрд┐рдорд╛рдЧ" рджреЛрдиреЛрдВ рдЪрд╛рд╣рд┐рдП..??Flushed faceFlushed face"""
        val words = text.tokenize()
        assertThat(words).contains("рджрд┐рд▓")
        assertThat(words).contains("рджрд┐рдорд╛рдЧ")
    }

    @Test
    internal fun shouldHandleOneSidedItalicQuotes() {
        val words = """тАЬрдХрд░реЛрдЧреЗ рдЬрдм рдЕрдкрдиреА рдорд╛рддреГрднрд╛рд╖рд╛ рдХрд╛ рдорд╛рди рд╕рдореНрдорд╛рди
рддрднреА рдмрдврд╝реЗрдЧреА рджреЗрд╢ рдХреА рд╢рд╛рдитАЭ

рд╣рд┐рдВрджреВ-рд░рд╛рд╖реНрдЯреНрд░ рд╣рд┐рдВрджреА рднрд╛рд╖рд╛ рдХреЗ рдмрд┐рдирд╛ рдЕрдзреВрд░рд╛ рд╣реИ
рдЧрд░реНрд╡ рд╕реЗ рд╣рд┐рдВрджреА рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХрд░реЗ
рд╣рд░ рдПрдХ рд╕рдирд╛рддрдиреА рдХреА рдкрд╣рдЪрд╛рди рд╣реИ рд╣рдорд╛рд░реА рд╣рд┐рдВрджреА

#рд╡рд┐рд╢реНрд╡_рд╣рд┐рдВрджреА_рджрд┐рд╡рд╕ ЁЯЪй

https://t.co/UgTnxnuWwp""".tokenize()
        assertThat(words).contains("рд╢рд╛рди")
    }

    @Test
    internal fun shouldFindWordsSeparatedByQuote() {
        val text = """рдЬреЛ рднрд╛рдЧреНрдп рдмрдирд╛рддрд╛ рд╣реИ рдорд╣рд╛рджреЗрд╡ рдХрд╣рд▓рд╛рддрд╛ рд╣реИ''
рдЬреЛ рдкрд╛рд░ рдХрд░реЗ рдиреИрдпрд╛ рд╡реЛ рдкрд╛рд░реНрд╡рддреА рдордИрдпрд╛...

"рдореЛрд╣рдмреНрдмрдд"рд▓рд┐рдмрд╛рд╕" рдирд╣реАрдВ
       рдЬреЛ рд╣рд░ "рд░реЛрдЬрд╝"рдмрджрд▓рд╛ рдЬрд╛рдП,
рдореЛрд╣рдмреНрдмрдд"рдХрдлрд╝рди"рд╣реИрдВ
      "рдкрд╣рди"рдХрд░"рдЙрддрд╛рд░рд╛"рдирд╣реАрдВ рдЬрд╛рддрд╛..тЬН"""
        val words = text.tokenize()
        assertThat(words).contains("рдореЛрд╣рдмреНрдмрдд")
        assertThat(words).contains("рд▓рд┐рдмрд╛рд╕")
        assertThat(words).contains("рдХрдлрд╝рди")
    }

    @Test
    internal fun shouldSplitWordsByInvertedDoubleQuotes() {
        val words = "тАЬрдЗрдЬрд╝реНрдЬрд╝рдд рддреЛ рд╕рдмрдХреЛ рд╣реА рдЪрд╛рд╣рд┐рдП \nрд▓реЗрдХрд┐рди рд▓реЛрдЧ рдмрд╕ рд╡рд╛рдкрд╕ рджреЗрдирд╛ рднреВрд▓ рдЬрд╛рддреЗ рд╣реИрдВтАЭ".tokenize()
        assertThat(words).contains("рдЗрдЬрд╝реНрдЬрд╝рдд")
    }
    @Test
    internal fun shouldFindWordWithVisarga() {
        val words = "рд╕рдмрдХреЛ рд╣реА рдЪрд╛рд╣рд┐рдП рд▓реЗрдХрд┐рди: рд▓реЛрдЧ рдмрд╕ рднреВрд▓ рдЬрд╛рддреЗ рд╣реИрдВтАЭ".tokenize()
        assertThat(words).contains("рд▓реЗрдХрд┐рди")
    }

    @Test
    internal fun shouldFindWordWithSemiColon() {
        val words = "рд╕рдмрдХреЛ рд╣реА рдЪрд╛рд╣рд┐рдП рд▓реЗрдХрд┐рди; рд▓реЛрдЧ рдмрд╕ рднреВрд▓ рдЬрд╛рддреЗ рд╣реИрдВтАЭ".tokenize()
        assertThat(words).contains("рд▓реЗрдХрд┐рди")
    }

    @Test
    fun removeNukta() {
    }
}