package org.hindigarv.core

import org.junit.jupiter.api.Test
import org.assertj.core.api.Assertions.assertThat

import org.junit.jupiter.api.Assertions.*

internal class WordFinderTest {

    private val wordFinder = WordFinder()

//    @Test
//    fun shouldSplitTextToWords() {
//        val text = "рдмрд┐рд╣рд╛рд░ рдХреЙрдиреНрдЧреНрд░реЗрд╕ рдореЗрдВ рдЯреВрдЯ рдХреА рдЦрдмрд░реЛрдВ рдиреЗ рдЬреЛрд░ рдкрдХрдбрд╝ рд▓рд┐рдпрд╛ рд╣реИред 2017 рдореЗрдВ рдЬрдм рдиреАрддреАрд╢ рдХреБрдорд╛рд░ рдиреЗ рдорд╣рд╛рдЧрдардмрдВрдзрди рдЫреЛрдбрд╝рд╛ рдерд╛, рддрдм рднреА рдкрд╛рд░реНрдЯреА рдореЗрдВ рдЯреВрдЯ рд╣реБрдИ рдереАред"
//        val words = listOf("рдмрд┐рд╣рд╛рд░", "рдХреЙрдиреНрдЧреНрд░реЗрд╕", "рдореЗрдВ", "рдЯреВрдЯ", "рдХреА", "рдЦрдмрд░реЛрдВ", "рдиреЗ", "рдЬреЛрд░", "рдкрдХрдбрд╝", "рд▓рд┐рдпрд╛", "рд╣реИ", "2017", "рдореЗрдВ",
//            "рдЬрдм", "рдиреАрддреАрд╢", "рдХреБрдорд╛рд░", "рдиреЗ", "рдорд╣рд╛рдЧрдардмрдВрдзрди", "рдЫреЛрдбрд╝рд╛", "рдерд╛", "рддрдм", "рднреА", "рдкрд╛рд░реНрдЯреА", "рдореЗрдВ", "рдЯреВрдЯ", "рд╣реБрдИ", "рдереА")
//        assertEquals(words, wordFinder.toWords(text))
//    }
//
//    @Test
//    fun shouldIgnoreMoreSpaces() {
//        val text = "рд╕рдм рд╕реЛ  рдЧрдП  рдХреНрдпрд╛"
//        val words = listOf("рд╕рдм", "рд╕реЛ", "рдЧрдП", "рдХреНрдпрд╛")
//        assertEquals(words, wordFinder.toWords(text))
//    }
//
//    @Test
//    fun shouldIgnoreTabAndNewLines() {
//        val text = "рд╕рдм рд╕реЛ \t рдЧрдП\nрдХреНрдпрд╛"
//        val words = listOf("рд╕рдм", "рд╕реЛ", "рдЧрдП", "рдХреНрдпрд╛")
//        assertEquals(words, wordFinder.toWords(text))
//    }
//
//    @Test
//    fun shouldIgnoreCommaAndFullStops() {
//        val text = "рд╕рдм, рд╕реЛ рдЧрдП рдХреНрдпрд╛."
//        val words = listOf("рд╕рдм", "рд╕реЛ", "рдЧрдП", "рдХреНрдпрд╛")
//        assertEquals(words, wordFinder.toWords(text))
//    }
//    @Test
//    fun shouldIgnoreHindiFullStops() {
//        val text = "рд╕рдм, рд╕реЛ рдЧрдП рдХреНрдпрд╛ред"
//        val words = listOf("рд╕рдм", "рд╕реЛ", "рдЧрдП", "рдХреНрдпрд╛")
//        assertEquals(words, wordFinder.toWords(text))
//    }
//
//    @Test
//    fun shouldIgnoreQuestionMarks() {
//        val text = "рд╕рдм рд╕реЛ рдЧрдП рдХреНрдпрд╛?"
//        val words = listOf("рд╕рдм", "рд╕реЛ", "рдЧрдП", "рдХреНрдпрд╛")
//        assertEquals(words, wordFinder.toWords(text))
//    }
//
//    @Test
//    fun shouldIgnoreExclamationMark() {
//        val text = "рд╕рдм рд╕реЛ рдЧрдП рдХреНрдпрд╛!"
//        val words = listOf("рд╕рдм", "рд╕реЛ", "рдЧрдП", "рдХреНрдпрд╛")
//        assertEquals(words, wordFinder.toWords(text))
//    }
//
//    @Test
//    fun shouldSplitWordsWithOnlyDot() {
//        val text = "рд╕рдм.рд╕реЛ"
//        val words = listOf("рд╕рдм", "рд╕реЛ")
//        assertEquals(words, wordFinder.toWords(text))
//    }
//
//    @Test
//    fun shouldSplitWordsWithManyDots() {
//        val text = "рд╕рдм....рд╕реЛ"
//        val words = listOf("рд╕рдм", "рд╕реЛ")
//        assertEquals(words, wordFinder.toWords(text))
//    }
//
//    @Test
//    fun shouldSplitWordsWithOnlyComma() {
//        val text = "рд╕рдм,рд╕реЛ"
//        val words = listOf("рд╕рдм", "рд╕реЛ")
//        assertEquals(words, wordFinder.toWords(text))
//    }
//
//    @Test
//    fun shouldSplitWordsWithManyCommas() {
//        assertThat(wordFinder.toWords("рд╕рдм,,,,,,,рд╕реЛ")).isEqualTo(listOf("рд╕рдм", "рд╕реЛ"))
//    }
//
//    @Test
//    fun shouldSplitWordsWithManyCommasAndDotsMixed() {
//        assertThat(wordFinder.toWords("рд╕рдм,,.,,.,..,,.рд╕реЛ")).isEqualTo(listOf("рд╕рдм", "рд╕реЛ"))
//    }
//
//    @Test
//    fun shouldIgnorePercentageSign() {
//        val text = "рдкрддрдВрдЬрд▓рд┐ рдХрд╛ рдкреНрд░реЙрдлрд┐рдЯ 100% рдЪреИрд░рд┐рдЯреА рдХреЗ рд▓рд┐рдпреЗред"
//        val words = listOf("рдкрддрдВрдЬрд▓рд┐", "рдХрд╛", "рдкреНрд░реЙрдлрд┐рдЯ", "100", "рдЪреИрд░рд┐рдЯреА", "рдХреЗ", "рд▓рд┐рдпреЗ")
//        assertEquals(words, wordFinder.toWords(text))
//    }
//
//    @Test
//    fun shouldIgnoreBraces() {
//        val text = "рдкрддрдВрдЬрд▓рд┐ (рдХрд╛) рдкреНрд░реЙрдлрд┐рдЯ 100% [рдЪреИрд░рд┐рдЯреА] {рдХреЗ} рд▓рд┐рдпреЗред"
//        val words = listOf("рдкрддрдВрдЬрд▓рд┐", "рдХрд╛", "рдкреНрд░реЙрдлрд┐рдЯ", "100", "рдЪреИрд░рд┐рдЯреА", "рдХреЗ", "рд▓рд┐рдпреЗ")
//        assertEquals(words, wordFinder.toWords(text))
//    }
//
//    @Test
//    internal fun shouldHandleStarAsASeparator() {
//        val words = wordFinder.toWords("рдЕрдЧрд░ рдХреЛрдИ рдЖрдкрдХреА рдЙрдореНрдореАрдж рд╕реЗ рдЬреАрддрд╛ рд╣реИрдВ, рддреЛ рдЖрдк рднреА рдЙрд╕рдХреЗ рдпрдХреАрди рдкрд░ рдЦрд░рд╛ рдЙрддрд░рд┐рдпреЗ......... *рдХреНрдпреЛрдВрдХрд┐*рдЗрдВрд╕рд╛рди рдЙрд╕рд┐ рд╕реЗ рдЙрдореНрдореАрдж рд░рдЦрддрд╛ рд╣реИ, рдЬрд┐рд╕рдХреЛ рд╡реЛ рдЕрдкрдиреЗ рд╕рдмрд╕реЗ рдХрд░реАрдм рдорд╛рдирддрд╛ рд╣реИ!..... #рдЬрдп рд╢реНрд░реАрд░рд╛рдо \uD83D\uDEA9\uD83D\uDEA9")
//        assertThat(words).contains("рдЗрдВрд╕рд╛рди")
//    }
//
//    @Test
//    internal fun shouldSplitWordByNBSP() {
//        val words = wordFinder.toWords("рдорд╛рдШ┬ардмрд┐рд╣реВ рдЗрд╕ рд╕рд╛рд▓ 2021,  15 рдЬрдирд╡рд░реА, рд╢реБрдХреНрд░рд╡рд╛рд░ рдХреЛ рдордирд╛рдпрд╛ рдЬрд╛рдПрдЧрд╛ ред рдЕрд╕рдо┬ардХреЗ┬ард▓реЛрдЧ рдЗрд╕ рддреНрдпреЛрд╣рд╛рд░┬ардХреЗ┬ард╕рд╛рде рд╣реА рдирдпреЗ рд╕рд╛рд▓┬ардХреА┬ард╢реБрд░реБрдЖрдд рдорд╛рдирддреЗ┬ард╣реИрдВ ред #рейрд╣")
//        assertThat(words).contains("рд╢реБрд░реБрдЖрдд")
//    }
//
//    @Test
//    internal fun shouldSplitWordsByUnderscore() {
//        val words = wordFinder.toWords("""рд╕рднреА рд▓реЛрдЧ рдмрдврд╝рдЪрдврд╝рдХрд░ рд╣рд┐рд╕реНрд╕рд╛ рд▓реАрдЬрд┐рдпреЗредред
// рдЕрдВрддрд░рд╛рд╖реНрдЯреНрд░реАрдп рдореБрд╣рд┐рдо  рдмрдирд╛рдиреЗ рдореЗрдВ рд╕рд╣рдпреЛрдЧ рдХреА рдЕрдкреЗрдХреНрд╖рд╛тЪФя╕П
//
//#рджреЗрд╡рдирд┐рдВрджрд╛_рдХрд╛рдиреВрди_рдмрдирд╛рдУ
//#рджреЗрд╡рдирд┐рдВрджрд╛_рдХрд╛рдиреВрди_рдмрдирд╛рдУ
//#рджреЗрд╡рдирд┐рдВрджрд╛_рдХрд╛рдиреВрди_рдмрдирд╛рдУ
//
//Copy &amp; RtтЬМя╕П""")
//        assertThat(words).contains("рдХрд╛рдиреВрди")
//    }
//
//    @Test
//    internal fun shouldSplitWordByDash() {
//        val words = wordFinder.toWords("""рдорд╢рд╣реВрд░ рд╣реЛрдиреЗ рдХрд╛ рд╢реМрдХ рд╣рдореЗрдВ рдирд╣реАрдВ рд╣реИ рд╕рд╛рд╣рдм рдмрд╕ рд╕реБрдмрд╣-рд╕реБрдмрд╣ рдХреЛрдИ рдЬрдп рдЬрдп рд╢реНрд░реА рд░рд╛рдо рдмреЛрд▓ рджреЗ рддреЛ рдЫрд╛рддреА рдЪреМрдбрд╝реА рд╣реЛ рдЬрд╛рддреА рд╣реИ" ...!
//
//            ЁЯЩП " рдЬрдп рд╢реНрд░реА рд░рд╛рдо " ЁЯЩП""")
//        assertThat(words).contains("рд╕реБрдмрд╣")
//    }
//
//    @Test
//    internal fun shouldSplitWordByEmoji() {
//        val words = wordFinder.toWords("""рдорд┐рддреНрд░реЛрдВ рдХрд┐рддрдиреЗ рдЪрд╛рд╣рддреЗ рд╣реЛ рдХрд┐ рдореИрдВ рдЯреНрд╡рд┐рдЯрд░ рдкрд░ рдПрдХреНрдЯрд┐рд╡ рд░рд╣реВрдВ рдФрд░
//рдХрд┐рддрдиреЗ рдЪрд╛рд╣рддреЗ рд╣реИ рдХрд┐ рдЫреЛрдбрд╝ рджреВрдВ ЁЯШЮ
//
//рдЬрд╡рд╛рдмЁЯЩП""")
//        assertThat(words).contains("рдЬрд╡рд╛рдм")
//    }
//    @Test
//    internal fun shouldHandleOneSidedQuotes() {
//        val text = """рдЕрдЬреА рд╕реБрдирддреЗ рд╣реЛ, рдПрдХ рд░рд╛рдЬ рдХреА рдмрд╛рдд рдмрддрд╛рддреА рд╣реВрдВ..??
//
//рдореЛрд╣рдмреНрдмрдд рдХреЗ рд▓рд┐рдП "рджрд┐рд▓ рдФрд░ рджрд┐рдорд╛рдЧ" рджреЛрдиреЛрдВ рдЪрд╛рд╣рд┐рдП..??Flushed faceFlushed face"""
//        val words = wordFinder.toWords(text)
//        assertThat(words).contains("рджрд┐рд▓")
//        assertThat(words).contains("рджрд┐рдорд╛рдЧ")
//    }
//
//    @Test
//    internal fun shouldHandleOneSidedItalicQuotes() {
//        val words = wordFinder.toWords("""тАЬрдХрд░реЛрдЧреЗ рдЬрдм рдЕрдкрдиреА рдорд╛рддреГрднрд╛рд╖рд╛ рдХрд╛ рдорд╛рди рд╕рдореНрдорд╛рди
//рддрднреА рдмрдврд╝реЗрдЧреА рджреЗрд╢ рдХреА рд╢рд╛рдитАЭ
//
//рд╣рд┐рдВрджреВ-рд░рд╛рд╖реНрдЯреНрд░ рд╣рд┐рдВрджреА рднрд╛рд╖рд╛ рдХреЗ рдмрд┐рдирд╛ рдЕрдзреВрд░рд╛ рд╣реИ
//рдЧрд░реНрд╡ рд╕реЗ рд╣рд┐рдВрджреА рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХрд░реЗ
//рд╣рд░ рдПрдХ рд╕рдирд╛рддрдиреА рдХреА рдкрд╣рдЪрд╛рди рд╣реИ рд╣рдорд╛рд░реА рд╣рд┐рдВрджреА
//
//#рд╡рд┐рд╢реНрд╡_рд╣рд┐рдВрджреА_рджрд┐рд╡рд╕ ЁЯЪй
//
//https://t.co/UgTnxnuWwp""")
//        assertThat(words).contains("рд╢рд╛рди")
//    }
//
//    @Test
//    internal fun shouldFindWordsSeparatedByQuote() {
//        val text = """рдЬреЛ рднрд╛рдЧреНрдп рдмрдирд╛рддрд╛ рд╣реИ рдорд╣рд╛рджреЗрд╡ рдХрд╣рд▓рд╛рддрд╛ рд╣реИ''
//рдЬреЛ рдкрд╛рд░ рдХрд░реЗ рдиреИрдпрд╛ рд╡реЛ рдкрд╛рд░реНрд╡рддреА рдордИрдпрд╛...
//
//"рдореЛрд╣рдмреНрдмрдд"рд▓рд┐рдмрд╛рд╕" рдирд╣реАрдВ
//       рдЬреЛ рд╣рд░ "рд░реЛрдЬрд╝"рдмрджрд▓рд╛ рдЬрд╛рдП,
//рдореЛрд╣рдмреНрдмрдд"рдХрдлрд╝рди"рд╣реИрдВ
//      "рдкрд╣рди"рдХрд░"рдЙрддрд╛рд░рд╛"рдирд╣реАрдВ рдЬрд╛рддрд╛..тЬН"""
//        val words = wordFinder.toWords(text)
//        assertThat(words).contains("рдореЛрд╣рдмреНрдмрдд")
//        assertThat(words).contains("рд▓рд┐рдмрд╛рд╕")
//        assertThat(words).contains("рдХрдлрд╝рди")
//    }
//
//    @Test
//    internal fun shouldSplitWordsByInvertedDoubleQuotes() {
//        val words = wordFinder.toWords("тАЬрдЗрдЬрд╝реНрдЬрд╝рдд рддреЛ рд╕рдмрдХреЛ рд╣реА рдЪрд╛рд╣рд┐рдП \nрд▓реЗрдХрд┐рди рд▓реЛрдЧ рдмрд╕ рд╡рд╛рдкрд╕ рджреЗрдирд╛ рднреВрд▓ рдЬрд╛рддреЗ рд╣реИрдВтАЭ")
//        assertThat(words).contains("рдЗрдЬрд╝реНрдЬрд╝рдд")
//    }
//    @Test
//    internal fun shouldFindWordWithVisarga() {
//        val words = wordFinder.toWords("рд╕рдмрдХреЛ рд╣реА рдЪрд╛рд╣рд┐рдП рд▓реЗрдХрд┐рди: рд▓реЛрдЧ рдмрд╕ рднреВрд▓ рдЬрд╛рддреЗ рд╣реИрдВтАЭ")
//        assertThat(words).contains("рд▓реЗрдХрд┐рди")
//    }
//
//    @Test
//    internal fun shouldFindWordWithSemiColon() {
//        val words = wordFinder.toWords("рд╕рдмрдХреЛ рд╣реА рдЪрд╛рд╣рд┐рдП рд▓реЗрдХрд┐рди; рд▓реЛрдЧ рдмрд╕ рднреВрд▓ рдЬрд╛рддреЗ рд╣реИрдВтАЭ")
//        assertThat(words).contains("рд▓реЗрдХрд┐рди")
//    }

    @Test
    fun shouldFindForeignWords() {
        val text = "рдЧрдЬрдм рд╣реИ рдкрдЯрд╛рдХреЗ рдмреЗрди рдХрд░рд╡рд╛рдиреЗ рд╡рд╛рд▓рд╛ рд▓рдХреНрд╖реНрдореА рдкреВрдЬрд╛ рдХрд╛ рдореБрд╣реВрд░реНрдд рдмрддрд╛ рд░рд╣рд╛ рд╣реИ......"
        val words = wordFinder.find(text)
        assertEquals(1, words.size)
        assertEquals("рдЧрдЬрдм", words[0].shabd)
    }

    @Test
    fun shouldFindMultipleForeignWords() {
        val text = """@narendramodi
 рдЬреА рдЕрдЧрд░ рд╕реБрднрд╛рд╖ рдЪрдВрджреНрд░рдмреЛрд╕ рдЬреА, рдиреЗ рдЕрдЧрд░ рдЕрдВрдЧреНрд░реЗрдЬреЛ рдХреЗ рд╕рд╛рдордиреЗ рд╣рдерд┐рдпрд╛рд░ рдбрд╛рд▓ рджрд┐рдП рд╣реЛрддреЗ рддреЛ рд╣рдо рдЖрдЬрд╛рдж рдирд╣реАрдВ рд╣реЛрддреЗ рд▓реЗрдХрд┐рди рдЖрдкрдиреЗ рдЕрд░реНрдмрди рдирдХреНрд╕рд▓ рдХреЗ рд╕рд╛рдордиреЗ рд╕рд░реЗрдВрдбрд░ рдХрд░ рджрд┐рдпрд╛ рд╣реИрдВ!рдЗрди рдЬреИрд╕реЗ рд▓реЛрдЧреЛ рдХреЛ рдЕрдЪреНрдЫреЗ рд╕реЗ рд╕рдмрдХ рд╕рд┐рдЦрд╛рдУ рдирд╣реАрдВ рддреЛ рджреЗрд╢ рдХреЛ рдЖрдкрдХреЛ рдорд╛рдлрд╝ рдирд╣реАрдВ рдХрд░реЗрдЧрд╛,JNU рдХреЛ рд╕реБрдзрд╛рд░реЛ"""
        val words = wordFinder.find(text)
        assertEquals(5, words.size)
        assertEquals("рдЕрдЧрд░", words[0].shabd)
        assertEquals("рдЖрдЬрд╛рдж", words[1].shabd)
        assertEquals("рд▓реЗрдХрд┐рди", words[2].shabd)
        assertEquals("рд╕рд░реЗрдВрдбрд░", words[3].shabd)
        assertEquals("рд╕рдмрдХ", words[4].shabd)
    }

    @Test
    fun shouldFindWordWithNukta() {
        val text = """@narendramodi
 рдЬреА рдЕрдЧрд░ рд╕реБрднрд╛рд╖ рдЪрдВрджреНрд░рдмреЛрд╕ рдЬреА, рдиреЗ рдЕрдЧрд░ рдЕрдВрдЧреНрд░реЗрдЬреЛ рдХреЗ рд╕рд╛рдордиреЗ рд╣рдерд┐рдпрд╛рд░ рдбрд╛рд▓ рджрд┐рдП рд╣реЛрддреЗ рддреЛ рд╣рдо рдЖреЫрд╛рдж рдирд╣реАрдВ рд╣реЛрддреЗ рд▓реЗрдХрд┐рди рдЖрдкрдиреЗ рдЕрд░реНрдмрди рдирдХреНрд╕рд▓ рдХреЗ рд╕рд╛рдордиреЗ рд╕рд░реЗрдВрдбрд░ рдХрд░ рджрд┐рдпрд╛ рд╣реИрдВ!рдЗрди рдЬреИрд╕реЗ рд▓реЛрдЧреЛ рдХреЛ рдЕрдЪреНрдЫреЗ рд╕реЗ рд╕рдмрдХ рд╕рд┐рдЦрд╛рдУ рдирд╣реАрдВ рддреЛ рджреЗрд╢ рдХреЛ рдЖрдкрдХреЛ рдорд╛рдлрд╝ рдирд╣реАрдВ рдХрд░реЗрдЧрд╛,JNU рдХреЛ рд╕реБрдзрд╛рд░реЛ"""
        val words = wordFinder.find(text)
        assertEquals(5, words.size)
        assertEquals("рдЕрдЧрд░", words[0].shabd)
        assertEquals("рдЖрдЬрд╛рдж", words[1].shabd)
        assertEquals("рд▓реЗрдХрд┐рди", words[2].shabd)
        assertEquals("рд╕рд░реЗрдВрдбрд░", words[3].shabd)
        assertEquals("рд╕рдмрдХ", words[4].shabd)
    }

    @Test
    fun shouldNotConsiderSameWordWithNuktaAsADifferentWord() {
        val text = """@narendramodi
 рдЬреА рдЕрдЧрд░ рд╕реБрднрд╛рд╖ рдЪрдВрджреНрд░рдмреЛрд╕ рдЬреА, рдиреЗ рдЕрдЧрд░ рдЕрдВрдЧреНрд░реЗрдЬреЛ рдХреЗ рд╕рд╛рдордиреЗ рд╣рдерд┐рдпрд╛рд░ рдбрд╛рд▓ рджрд┐рдП рд╣реЛрддреЗ рддреЛ рд╣рдо рдЖрдЬрд╛рдж рдирд╣реАрдВ рд╣реЛрддреЗ рд▓реЗрдХрд┐рди рдЖрдкрдиреЗ рдЕрд░реНрдмрди рдирдХреНрд╕рд▓ рдХреЗ рд╕рд╛рдордиреЗ рд╕рд░реЗрдВрдбрд░ рдХрд░ рджрд┐рдпрд╛ рд╣реИрдВ! рдЖреЫрд╛рдж . рдЗрди рдЬреИрд╕реЗ рд▓реЛрдЧреЛ рдХреЛ рдЕрдЪреНрдЫреЗ рд╕реЗ рд╕рдмрдХ рд╕рд┐рдЦрд╛рдУ рдирд╣реАрдВ рддреЛ рджреЗрд╢ рдХреЛ рдЖрдкрдХреЛ рдорд╛рдлрд╝ рдирд╣реАрдВ рдХрд░реЗрдЧрд╛,JNU рдХреЛ рд╕реБрдзрд╛рд░реЛ"""
        val words = wordFinder.find(text)
        assertEquals(5, words.size)
        assertEquals("рдЕрдЧрд░", words[0].shabd)
        assertEquals("рдЖрдЬрд╛рдж", words[1].shabd)
        assertEquals("рд▓реЗрдХрд┐рди", words[2].shabd)
        assertEquals("рд╕рд░реЗрдВрдбрд░", words[3].shabd)
        assertEquals("рд╕рдмрдХ", words[4].shabd)
    }

    @Test
    internal fun shouldIgnoreRepeatedWords() {
        val text = "aaa рд▓реЗрдХрд┐рди aaa рдЖрдЬрд╛рдж bbb рд▓реЗрдХрд┐рди ccc"
        val words = wordFinder.find(text)
        assertThat(words).hasSize(2)
        assertThat(words[0].shabd).isEqualTo("рд▓реЗрдХрд┐рди")
        assertThat(words[1].shabd).isEqualTo("рдЖрдЬрд╛рдж")
    }

    @Test
    internal fun shouldFindSingleQuotedWords() {
        val text = "aaa 'рд▓реЗрдХрд┐рди' aaa 'рдЖрдЬрд╛рдж' bbb"
        val words = wordFinder.find(text)
        assertThat(words).hasSize(2)
        assertThat(words[0].shabd).isEqualTo("рд▓реЗрдХрд┐рди")
        assertThat(words[1].shabd).isEqualTo("рдЖрдЬрд╛рдж")
    }

    @Test
    internal fun shouldFindSingleInvertedQuotedWords() {
        val words = wordFinder.find("aaa тАШрд▓реЗрдХрд┐рдитАЩ bbb")
        assertThat(words).hasSize(1)
        assertThat(words[0].shabd).isEqualTo("рд▓реЗрдХрд┐рди")
    }

    @Test
    internal fun shouldFindDoubleQuotedWords() {
        val text = "aaa \"рд▓реЗрдХрд┐рди\" aaa \"рдЖрдЬрд╛рдж\" bbb"
        val words = wordFinder.find(text)
        assertThat(words).hasSize(2)
        assertThat(words[0].shabd).isEqualTo("рд▓реЗрдХрд┐рди")
        assertThat(words[1].shabd).isEqualTo("рдЖрдЬрд╛рдж")
    }

    @Test
    internal fun shouldHashTaggedWords() {
        val text = "aaa #рд▓реЗрдХрд┐рди aaa #рдЖрдЬрд╛рдж bbb"
        val words = wordFinder.find(text)
        assertThat(words).hasSize(2)
        assertThat(words[0].shabd).isEqualTo("рд▓реЗрдХрд┐рди")
        assertThat(words[1].shabd).isEqualTo("рдЖрдЬрд╛рдж")
    }



    @Test
    internal fun shouldFindDoubleQuotedSingleQuotedAndHashTaggedWordsFromOneText() {
        val text = "aaa \"рд▓реЗрдХрд┐рди\" aaa #рдЖрдЬрд╛рдж bbb 'рдЕрдЧрд░' ccc "
        val words = wordFinder.find(text)
        assertThat(words).hasSize(3)
        assertThat(words[0].shabd).isEqualTo("рд▓реЗрдХрд┐рди")
        assertThat(words[1].shabd).isEqualTo("рдЖрдЬрд╛рдж")
        assertThat(words[2].shabd).isEqualTo("рдЕрдЧрд░")
    }


}